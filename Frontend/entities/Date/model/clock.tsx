import { useEffect, useState } from "react";
import type { ClockProp } from "./type";

type TimeTrigger = "morning" | "day" | "evening" | "night";

function getTimeTrigger(date: Date): TimeTrigger {
  const hour = date.getHours();
  if (hour >= 5 && hour < 12) return "morning";
  if (hour >= 12 && hour < 17) return "day";
  if (hour >= 17 && hour < 21) return "evening";
  return "night";
}

const phrases: Record<TimeTrigger, string[]> = {
  morning: [
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ ‚òÄÔ∏è ‚Äî –Ω–æ–≤—ã–π –¥–µ–Ω—å –∂–¥—ë—Ç!",
    "–í—Å—Ç–∞–≤–∞–π, —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è üí™",
    "–ó–∞—Ä—è–¥–∏—Å—å —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –≤–ø–µ—Ä—ë–¥ üöÄ",
    "–£—Ç—Ä–æ ‚Äî –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π ‚ú®",
    "–ö–æ—Ñ–µ —É–∂–µ –∑–æ–≤—ë—Ç —Ç–µ–±—è ‚òï",
  ],
  day: [
    "–î–µ–Ω—å –≤ —Ä–∞–∑–≥–∞—Ä–µ üåø",
    "–†–∞–±–æ—Ç–∞ –∫–∏–ø–∏—Ç",
    "–í—Å—ë –¥–≤–∏–∂–µ—Ç—Å—è –≤–ø–µ—Ä—ë–¥ ‚Äî –∏ —Ç—ã –≤–º–µ—Å—Ç–µ —Å —ç—Ç–∏–º üö¥",
    "–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ –æ–±–µ–¥ üç¥",
    "–†–∞–±–æ—á–∏–π –Ω–∞—Å—Ç—Ä–æ–π –¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è –≤ —Ç–æ–Ω—É—Å–µ üìà",
  ],
  evening: [
    "–í–µ—á–µ—Ä –ø—Ä–∏–Ω–æ—Å–∏—Ç —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ üåÜ",
    "–ü–æ—Ä–∞ –ø–æ–¥–≤–æ–¥–∏—Ç—å –∏—Ç–æ–≥–∏",
    "–†–∞—Å—Å–ª–∞–±—å—Å—è ‚Äî —Ç—ã —ç—Ç–æ –∑–∞—Å–ª—É–∂–∏–ª üç∑",
    "–ó–∞–∫–∞—Ç –Ω–∞–ø–æ–ª–Ω—è–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º üé®",
    "–°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ –¥–ª—è —Å–µ–±—è üå∏",
  ],
  night: [
    "–î–æ–±—Ä–æ–π –Ω–æ—á–∏ üåô",
    "–¢–∏—à–∏–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç –º—ã—Å–ª–∏",
    "–ó–∞–≤—Ç—Ä–∞ –∂–¥—ë—Ç —Ç–µ–±—è —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ ‚ú®",
    "–ü—É—Å—Ç—å –Ω–æ—á—å –ø–æ–¥–∞—Ä–∏—Ç –æ—Ç–¥—ã—Ö –∏ —Å–∏–ª—ã üò¥",
    "–í—Ä–µ–º—è —Å–Ω–æ–≤ –∏ –∏–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–¥—É—Ç –≤–æ —Å–Ω–µ üå†",
  ],
};

export const Clock = ({ startTime }: ClockProp) => {
  const [time, setTime] = useState<Date | null>(
    startTime ? new Date(startTime) : null
  );
  const [trigger, setTrigger] = useState<TimeTrigger | null>(null);
  const [phrase, setPhrase] = useState<string>("");

  useEffect(() => {
    if (startTime) {
      const date = new Date(startTime);
      setTime(date);
      setTrigger(getTimeTrigger(date));
    }
  }, [startTime]);

  useEffect(() => {
    if (!time) return;
    const interval = setInterval(() => {
      setTime((prev) => {
        if (!prev) return null;
        const next = new Date(prev.getTime() + 1000);
        setTrigger(getTimeTrigger(next));
        return next;
      });
    }, 1000);
    return () => clearInterval(interval);
  }, [time]);

  useEffect(() => {
    if (trigger) {
      const index = Math.floor(Math.random() * phrases[trigger].length);
      setPhrase(phrases[trigger][index]);
    }
  }, [trigger]);

  if (!time) return <p>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å–æ–≤...</p>;

  return (
    <>
      <h1>{time.toLocaleTimeString()}</h1>
      <span>{phrase}</span>
    </>
  );
};
